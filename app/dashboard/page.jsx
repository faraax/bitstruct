"use client"
import React, { useEffect, useState } from "react"
import BidsFilter from "../components/BidsFilter"
import Cards from "../components/Cards"
import Navbar from "../components/Navbar"
import { RiLayout2Fill, BsFillBuildingsFill, IoPerson } from "../Utils/icons"
import Cookies from "js-cookie";
import axios from "axios"
import { MdOutlineEventAvailable } from "react-icons/md"
import { CgUnavailable } from "react-icons/cg"

// export const metadata = {
//     title: 'Dashboard - Bit Struct',
//     description: 'Generated by create next app',
// }

const dashboardCards = [
    {
        id: 1,
        icon: <RiLayout2Fill className="text-4xl text-primary" />,
        heading: "Total Bids",
        totalBids: '8,980',
        percentage: '+10%'
    },
    {
        id: 2,
        icon: <BsFillBuildingsFill className="text-4xl text-primary" />,
        heading: "Total Areas",
        totalBids: '5,906',
        percentage: '+10%'
    },
    {
        id: 3,
        icon: <IoPerson className="text-4xl text-primary" />,
        heading: "Total Vendors",
        totalBids: '3,430',
        percentage: '+10%'
    }
]

// async function getData(token) {
//     // const headersInstance = headers()
//     // const authorization = headersInstance.get('authorization')
//     try {
//         const res = await fetch(`${process.env.APIENDPOINT}api/getPortalData`, {
//             headers: {
//                 "Content-Type": "application/json",
//                 "Authorization": `JWT ${token}`
//             }
//         })
//         // console.log(data);
//         return res.json()
//     } catch (err) {
//         throw new Error(err)
//     }
// }
// getData()

export default function DashboardPage() {
    const [portalData, setPortalData] = useState(null)
    const [portalid, setPortalid] = useState(null)
    const [loading, setLoading] = useState(false)

    useEffect(() => {
        const getPortalData = async () => {
            setPortalData(null)
            setLoading(true)
            try {
                let reqOptions = {
                    url: `${process.env.APIENDPOINT}api/getPortalData`,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `JWT ${Cookies.get('jwtToken')}`
                    },
                    data: { portalId: portalid.portalId }
                }
                let { data } = await axios.request(reqOptions);
                setPortalData(data)
                if (data) {
                    setLoading(false)
                }
                // console.log(portalData);
            } catch (err) {
                setPortalData(null)
                setLoading(false)
                console.log(err);
            }
        }
        if (portalid) {
            getPortalData()
        }
    }, [portalid])

    return (
        <div className="col-span-10">
            <Navbar />
            <div className="px-10 py-5">
                <div className="grid grid-cols-6 gap-4">
                    <div className="col-span-4">
                        <h2 className="text-lg font-medium mb-3">Dashboard</h2>
                        <div className="grid grid-cols-3 gap-7">
                            {
                                dashboardCards.map((cardsData, index) => (
                                    <div key={index} className="flex flex-col p-5 gap-1 border border-mute border-opacity-20 rounded-lg bg-white col-span-1">
                                        <Cards icon={cardsData.icon} totalBids={cardsData.totalBids} percentage={cardsData.percentage} heading={cardsData.heading} />
                                    </div>
                                ))
                            }
                        </div>
                    </div>
                    <div className="col-span-2">
                        <BidsFilter setPortalid={setPortalid} portalid={portalid} />
                    </div>
                </div>
                <div className="text-lg font-medium mt-5">
                    <h2>Bid Opportunities</h2>
                    <div className="overflow-auto w-full">
                        {
                            !portalData && <h2 className="text-mute mt-3">{loading ? "Please Wait while the data is being scraped" : 'Select Portal Id to scrape data'}</h2>
                        }
                        <table className="table-auto w-full -z-0 my-3">
                            {
                                portalData && (
                                    <thead className="z-40 bg-[#FAFCFF] border-b border-mute border-opacity-20">
                                        <tr className="text-mute text-left border-b border-mute border-opacity-20">
                                            <th className="font-normal py-3 px-3">County</th>
                                            <th className="font-normal py-3 px-3">BidDueDate</th>
                                            <th className="font-normal py-3 px-3">BidId</th>
                                            <th className="font-normal py-3 px-3">BidResponseFormat</th>
                                            <th className="font-normal py-3 px-3">BidResponseFormatStr</th>
                                            <th className="font-normal py-3 px-3">BidTemplateType</th>
                                            <th className="font-normal py-3 px-3">BidTypeId</th>
                                            <th className="font-normal py-3 px-3">ByInvitation</th>
                                            <th className="font-normal py-3 px-3">CategoryIds</th>
                                            <th className="font-normal py-3 px-3">CompanyId</th>
                                            <th className="font-normal py-3 px-3">EstimatedBid</th>
                                            <th className="font-normal py-3 px-3">InvitationNum</th>
                                            <th className="font-normal py-3 px-3">IssueDate</th>
                                            <th className="font-normal py-3 px-3">PageScrape</th>
                                            <th className="font-normal py-3 px-3">StageId</th>
                                            <th className="font-normal py-3 px-3">StageStr</th>
                                            <th className="font-normal py-3 px-3">Title</th>
                                        </tr>
                                    </thead>
                                )
                            }

                            <tbody>
                                {
                                    portalData && portalData.portal_data.map((portalList, index) => (
                                        <tr key={index} className="text-mute text-left border-b border-mute border-opacity-20">
                                            {
                                                Object.keys(portalList).map((objKeys, _i) => (
                                                    <td className="py-3 px-10" key={_i}>
                                                        {objKeys === "url" ? (
                                                            // console.log(portalList[objKeys])
                                                            <></>
                                                        ) : (objKeys === "title") ? (
                                                            portalList[objKeys].substring(0, 10)
                                                        ) : (objKeys === "bidDueDate") ? (
                                                            portalList[objKeys].substring(0, 10)
                                                            // console.log(portalList[objKeys])
                                                            // <></> issueDate
                                                        ) : (objKeys === "issueDate") ? (
                                                            portalList[objKeys].substring(0, 10)
                                                        ) : (objKeys === "byInvitation") ? (
                                                            portalList[objKeys] ? <MdOutlineEventAvailable className="text-xl text-primary" /> : <CgUnavailable className="text-xl text-red-700" />
                                                        ) : (portalList[objKeys] === "") ? (
                                                            'Nill'
                                                        ) : (
                                                            portalList[objKeys]
                                                        )
                                                        }
                                                    </td>
                                                ))
                                            }
                                        </tr>
                                    ))
                                }
                                {
                                    portalData?.portal_data.length === 0 && (
                                        <tr className="text-mute text-left border-b border-mute border-opacity-20">
                                            <td className="py-3 px-10 text-mute" colSpan={17}>No Data Available</td>
                                        </tr>
                                    )
                                }
                            </tbody>
                        </table >
                    </div>
                    {/* {
                        <h1 dangerouslySetInnerHTML={{ __html: JSON.stringify(portalData) }}></h1>
                    } */}
                </div>

            </div>
        </div>
    )
}
